name: Promote Images to DockerHub
on:
  release:
    types:
      - released
  workflow_dispatch:

permissions:
  contents: read

jobs:
  promote-to-jfrog-prod-env:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Login to JFrog
        uses: jfrog/setup-jfrog-cli@ff5cb544114ffc152db9cea1cd3d5978d5074946 # v4.5.11
        env:
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
          JF_PROJECT: ${{ vars.JFROG_CLI_BUILD_PROJECT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Metadata
        run: |
          echo "Getting latest Git tag..."
          TAG_COMMIT=$(git rev-list --tags --max-count=1 || true)

          if [ -n "$TAG_COMMIT" ]; then
            LATEST_TAG=$(git describe --tags "$TAG_COMMIT" 2>/dev/null || true)
          fi

          if [ -z "$LATEST_TAG" ]; then
            echo "No Git tag found. Trying to read VERSION file..."
            if [ -f VERSION ]; then
              LATEST_TAG=$(cat VERSION)
              echo "Read version from VERSION file: $LATEST_TAG"
            fi
          fi

          if [ -z "$LATEST_TAG" ]; then
            echo "No valid version found"
            exit 1
          fi
          
          
          BUNDLE_NAME="${GITHUB_REPOSITORY##*/}"
          echo "Setting BUNDLE_NAME=$BUNDLE_NAME"
          echo "BUNDLE_NAME=$BUNDLE_NAME" >> $GITHUB_ENV
          echo "Setting BUNDLE_VERSION=$LATEST_TAG"
          echo "BUNDLE_VERSION=$LATEST_TAG" >> $GITHUB_ENV
          echo "Setting IMAGE_TAG=${LATEST_TAG#v}"
          echo "IMAGE_TAG=${LATEST_TAG#v}" >> $GITHUB_ENV

      - name: Check Bundle was successfully created in JFrog
        id: check-bundle
        env:
          BUNDLE_NAME: ${{ env.BUNDLE_NAME }}
          BUNDLE_VERSION: ${{ env.BUNDLE_VERSION }}
          JF_PROJECT: ${{ vars.JFROG_CLI_BUILD_PROJECT }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
        run: |
          echo "Checking if the release bundle exists in JFrog..."

          URL="$JF_URL/lifecycle/api/v2/release_bundle/signatures/${BUNDLE_NAME}/${BUNDLE_VERSION}?project=${JF_PROJECT}"
          echo "Querying URL: $URL"

          HTTP_STATUS=$(curl --request GET \
            --header "Authorization: Bearer ${JF_ACCESS_TOKEN}" \
            --silent \
            --show-error \
            --output /dev/null \
            --write-out "%{http_code}" \
            "$URL")

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Bundle not found or request failed with HTTP status $HTTP_STATUS"
            echo "found=false" >> "$GITHUB_OUTPUT"
          else
            echo "Release bundle $BUNDLE_NAME:$BUNDLE_VERSION exists in JFrog (HTTP $HTTP_STATUS)"
            echo "found=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Promote to JFrog PROD Environment
        if: steps.check-bundle.outputs.found == 'true'
        env:
          BUNDLE_NAME: ${{ env.BUNDLE_NAME }}
          BUNDLE_VERSION: ${{ env.BUNDLE_VERSION }}
          JF_PROJECT: ${{ vars.JFROG_CLI_BUILD_PROJECT }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
        run: |
          
          TARGET_ENV="PROD"
          
          echo "Starting promotion of release bundle to JFrog $TARGET_ENV environment..."
          
          jfrog release-bundle-promote "$BUNDLE_NAME" "$BUNDLE_VERSION" \
            --signing-key="aerospike" \
            --project="$JF_PROJECT" \
            "$TARGET_ENV"
          
          if [ $? -ne 0 ]; then
            echo "Failed to promote $BUNDLE_NAME:$BUNDLE_VERSION release bundle to $TARGET_ENV"
            exit 1
          else
            echo "Successfully promoted $BUNDLE_NAME:$BUNDLE_VERSION to $TARGET_ENV"
          fi

      - name: Wait for Docker image to be available in JFrog registry
        if: steps.check-bundle.outputs.found == 'true'
        env:
          JF_REGISTRY: ${{ vars.ARTIFACTORY_REGISTRY_URL }}
          IMAGE_REPO: ${{ vars.ARTIFACTORY_CONTAINER_PROD }}
          IMAGE_NAME: ${{ env.BUNDLE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

        run: |
          IMAGE="$JF_REGISTRY/$IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG"
          MAX_RETRIES=4
          RETRY_DELAY=15
          
          echo "Checking for Docker image: $IMAGE"
          for i in $(seq 1 $MAX_RETRIES); do
            if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
              echo "Image found on attempt $i"
              exit 0
            else
              echo "Attempt $i failed. Image not found or unreachable."
              if [ "$i" -lt "$MAX_RETRIES" ]; then
                echo "Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              fi
            fi
          done
          
          echo "Image $IMAGE not found after $MAX_RETRIES attempts over $((MAX_RETRIES * RETRY_DELAY)) seconds."
          exit 1

      - name: Promote to DockerHub using docker image tools
        if: steps.check-bundle.outputs.found == 'true'
        id: promote-to-dockerhub
        env:
          JF_REGISTRY: ${{ vars.ARTIFACTORY_REGISTRY_URL }}
          IMAGE_REPO: ${{ vars.ARTIFACTORY_CONTAINER_PROD }}
          IMAGE_NAME: ${{ env.BUNDLE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          ORG: "aerospike"
        run: |
          echo "status=failure" >> "$GITHUB_OUTPUT"
#          SOURCE_IMAGE="$JF_REGISTRY/$IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG"
#          TARGET_IMAGE_VERSION_TAG="$ORG/$IMAGE_NAME:$IMAGE_TAG"
#          TARGET_IMAGE_LATEST_TAG="$ORG/$IMAGE_NAME:latest"
#
#          echo "Promoting image from: $SOURCE_IMAGE"
#          echo "Target tags: $TARGET_IMAGE_VERSION_TAG, $TARGET_IMAGE_LATEST_TAG"
#
#          echo "Creating promoted image manifest with both version and latest tags..."
#          if docker buildx imagetools create "$SOURCE_IMAGE" \
#            --tag "$TARGET_IMAGE_VERSION_TAG" \
#            --tag "$TARGET_IMAGE_LATEST_TAG"; then
#
#                echo "Promotion with latest tag succeeded."
#                echo "status=success" >> "$GITHUB_OUTPUT"
#          else
#                echo "Promotion failed."
#                echo "status=failure" >> "$GITHUB_OUTPUT"
#          fi

      - name: Get Tag Commit
        if: steps.check-bundle.outputs.found == 'true' && steps.promote-to-dockerhub.outputs.status == 'failure'
        env:
          TAG: ${{ env.BUNDLE_VERSION }}
        run: |
          TAG_COMMIT=$(git rev-list -n 1 $TAG)
          if [ -z "$TAG_COMMIT" ]; then
            echo "No valid commit hash for a tag"
            exit 1
          fi
          
          echo "Setting TAG_COMMIT=$TAG_COMMIT"
          echo "TAG_COMMIT=$TAG_COMMIT" >> $GITHUB_ENV

      - name: Download Aerospike Backup Service OCI Archive
        if: steps.check-bundle.outputs.found == 'true' && steps.promote-to-dockerhub.outputs.status == 'failure'
        uses: dawidd6/action-download-artifact@ac66b43f0e6a346234dd65d4d0c8fbb31cb316e5 # v11
        with:
          workflow: pre-release.yml
          name: abs-image
          path: ./abs-image
          commit: ${{ env.TAG_COMMIT }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Skopeo
        if: steps.check-bundle.outputs.found == 'true' && steps.promote-to-dockerhub.outputs.status == 'failure'
        uses: warjiang/setup-skopeo@71776e03c10d767c04af8924fe5a67763f9b3d34 # v0.1.3
        with:
          version: v1.19.0

      - name: Push OCI Archive to DockerHub
        if: steps.check-bundle.outputs.found == 'true' && steps.promote-to-dockerhub.outputs.status == 'failure'
        env:
          IMAGE_NAME: ${{ env.BUNDLE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Starting DockerHub push from OCI Archive..."
          echo "Image Name : $IMAGE_NAME"
          echo "Image Tag  : $IMAGE_TAG"
          
          echo "Verifying OCI archive content at ./abs-image/abs-image.tar"
          if [ ! -f ./abs-image/abs-image.tar ]; then
            echo "Archive file not found: ./abs-image/abs-image.tar"
            exit 1
          fi
          
          echo "Listing contents of OCI archive:"
          tar -tf ./abs-image/abs-image.tar || {
            echo "Failed to list archive contents."
            exit 1
          }
          
          echo "Initiating image push via skopeo to DockerHub..."
          
          for TAG in "$IMAGE_TAG" "latest"; do
            echo "Pushing tag: $TAG"
            skopeo copy --all \
              --dest-creds $DOCKER_USERNAME:$DOCKER_PASSWORD \
              oci-archive:./abs-image/abs-image.tar \
              docker://docker.io/aerospike/$IMAGE_NAME:$TAG
          
            SKOPEO_STATUS=$?
            if [ $SKOPEO_STATUS -ne 0 ]; then
              echo "skopeo copy for tag '$TAG' failed with exit code $SKOPEO_STATUS"
              exit $SKOPEO_STATUS
            fi
          done
          
          echo "OCI archive successfully pushed to DockerHub with both '$IMAGE_TAG' and 'latest' tags."
